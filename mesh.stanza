defpackage geom:
  import core
  import math
  import collections

public defstruct Mesh :
  vertices: Vector<V3f>
  indices:  Vector<Int>

;; public defn triangulate (p: Polygon) :
;;   val vertices = Vector<V3f>()
;;   val indices  = Vector<Int>()
;; 
;;   defn vertex-callback (index: Int) :
;;     ;; println("Vertex Callback")
;;     add(indices, index)
;; 
;;   defn combine-callback (x:Float, y:Float, z:Float) -> Int :
;;     ;; println("Combine Callback")
;;     add(vertices, V3f(x, y, z))
;;     length(vertices) - 1
;; 
;;   val tess-ptr = call-c(triangulator_new, vertex-callback, combine-callback)
;; 
;;   call-c(triangulator_begin_polygon, tess-ptr)
;;   for c in contours(p) do :
;;     call-c(triangulator_begin_contour, tess-ptr)
;;     for p in points(c) do :
;;       add(vertices, p)
;;       call-c(triangulator_vertex, tess-ptr, length(vertices) - 1, x(p), y(p), z(p))
;;     call-c(triangulator_end_contour, tess-ptr)
;;   call-c(triangulator_end_polygon, tess-ptr)
;; 
;;   Mesh(vertices, indices)

