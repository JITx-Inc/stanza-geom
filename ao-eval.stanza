defpackage ao-eval :
   import core
   import math
   import collections
   import reader
   import geom
   import eval
   import ao
   import glu

public defn eval-ao (s:String) -> Geom :
  val forms = read-all(s)
  val es = unwrap-all(parse(forms))
  jit({ eval-begin(top-env, es) })

;;; TODO: TEMPORARY CHECKING UNTIL REPL MODE IMPLEMENTED IN COMPILER

val VecFieldT = Type(`VecField, fn (x) : x is VecField, fn (x): x as VecField)
add-binding(top-env, `VecField, VecFieldT)
val FloFieldT = Type(`FloField, fn (x) : x is FloField, fn (x): x as FloField)
add-binding(top-env, `FloField, FloFieldT)
val FloFieldThunkT = Type(`FloFieldThunk, fn (x) : x is (() -> FloField), fn (x): x as (() -> FloField))
add-binding(top-env, `FloFieldThunk, FloFieldThunkT)

defstruct TypeFailureException <: Exception : 
  arg:  ?
  idx:  Int
  type: Type

defmethod print (o:OutputStream, e:TypeFailureException) :
  print(o, "Expected Type %_ on %_th Arg %_" % [name(type(e)) idx(e) arg(e)])

defn check-type (arg, i:Int, type:Type) :
  if not isa?(type)(arg) :
    throw(TypeFailureException(arg, i, type))

defn checked-function (f, types:Tuple<Type>) -> ? :
  switch {length(types) == _} :
    0: fn () :
         f()
    1: fn (a0) :
         check-type(a0, 0, types[0])
         f(a0)
    2: fn (a0 a1) :
         check-type(a0, 0, types[0]) check-type(a1, 1, types[1])
         f(a0 a1)
    3: fn (a0 a1 a2) :
         check-type(a0, 3, types[0]) check-type(a1, 1, types[1]) check-type(a2, 2, types[2])
         f(a0 a1 a2)
    4: fn (a0 a1 a2 a3) :
         check-type(a0, 0, types[0]) check-type(a1, 1, types[1]) check-type(a2, 2, types[2])
         check-type(a3, 3, types[3])
         f(a0 a1 a2 a3)
    5: fn (a0 a1 a2 a3 a4) :
         check-type(a0, 0, types[0]) check-type(a1, 1, types[1]) check-type(a2, 2, types[2])
         check-type(a3, 3, types[3]) check-type(a4, 4, types[4])
         f(a0 a1 a2 a3 a4)
    6: fn (a0 a1 a2 a3 a4 a5) :
         check-type(a0, 0, types[0]) check-type(a1, 1, types[1]) check-type(a2, 2, types[2])
         check-type(a3, 3, types[3]) check-type(a4, 4, types[4]) check-type(a5, 5, types[5])
         f(a0 a1 a2 a3 a4 a5)

public defn geom-eval-top-env () :
  eval-top-env()
  add-binding(top-env, `V2f, V2f)
  add-binding(top-env, `V3f, V3f)
  add-binding(top-env, `V3i, V3i)
  add-binding(top-env, `Box, Box)
  add-binding(top-env, `PolyLine, PolyLine)
  add-binding(top-env, `Polygon, Polygon)
  add-binding(top-env, `Contour, Contour)
  add-binding(top-env, `Mesh, Mesh)
  add-binding(top-env, `triangulate, triangulate)
  add-binding(top-env, `circle-n, circle-n)
  add-binding(top-env, `to-polygon, to-polygon)

public defn ao-eval-top-env () :
  geom-eval-top-env()
  add-binding(top-env, `pi, pi)
  add-binding(top-env, `hpi, 0.5 * pi)
  add-binding(top-env, `pi2, 2.0 * pi)
  add-binding(top-env, `lit, lit)
  add-binding(top-env, `x, checked-function(fab-x, []))
  add-binding(top-env, `y, checked-function(fab-y, []))
  add-binding(top-env, `z, checked-function(fab-z, []))
  add-binding(top-env, `VecField, checked-function(VecField, [FloFieldT, FloFieldT, FloFieldT]))
  add-binding(top-env, `V2n, checked-function(V2n, [FloFieldT, FloFieldT]))
  add-binding(top-env, `diff, checked-function(difference, [FloFieldT, FloFieldT]))
  add-binding(top-env, `bit-and, checked-function(bit-and, [FloFieldT, FloFieldT]))
  add-binding(top-env, `bit-or, checked-function(bit-or, [FloFieldT, FloFieldT]))
  add-binding(top-env, `plus, checked-function(plus, [FloFieldT, FloFieldT]))
  add-binding(top-env, `minus, checked-function(minus, [FloFieldT, FloFieldT]))
  add-binding(top-env, `times, checked-function(times, [FloFieldT, FloFieldT]))
  add-binding(top-env, `divide, checked-function(divide, [FloFieldT, FloFieldT]))
  add-binding(top-env, `negate, checked-function(negate, [FloFieldT]))
  add-binding(top-env, `sin, checked-function(sin, [FloFieldT]))
  add-binding(top-env, `cos, checked-function(cos, [FloFieldT]))
  add-binding(top-env, `tan, checked-function(tan, [FloFieldT]))
  add-binding(top-env, `asin, checked-function(asin, [FloFieldT]))
  add-binding(top-env, `acos, checked-function(acos, [FloFieldT]))
  add-binding(top-env, `atan, checked-function(atan, [FloFieldT]))
  add-binding(top-env, `atan2, checked-function(atan2, [FloFieldT, FloFieldT]))
  add-binding(top-env, `pow, checked-function(pow, [FloFieldT, FloFieldT]))
  add-binding(top-env, `exp, checked-function(exp, [FloFieldT, FloFieldT]))
  add-binding(top-env, `sqr, checked-function(sqr, [FloFieldT]))
  add-binding(top-env, `edge, checked-function(edge, [FloFieldT, FloFieldT, FloFieldT, FloFieldT]))
  add-binding(top-env, `tri, checked-function(triangle, [FloFieldT FloFieldT, FloFieldT, FloFieldT, FloFieldT, FloFieldT]))
  add-binding(top-env, `rect, checked-function(rect, [FloFieldT, FloFieldT]))
  add-binding(top-env, `square, checked-function(square, [FloFieldT]))
  add-binding(top-env, `circle, checked-function(circle, [FloFieldT]))
  add-binding(top-env, `to-field, to-field)
  add-binding(top-env, `to-field2, to-field2)
  add-binding(top-env, `convex, convex)
  add-binding(top-env, `cube, checked-function(cube, [FloFieldT]))
  add-binding(top-env, `box, checked-function(box, [VecFieldT]))
  add-binding(top-env, `round-box, checked-function(round-box, [VecFieldT, FloFieldT]))
  add-binding(top-env, `sphere, checked-function(sphere, [FloFieldT]))
  add-binding(top-env, `mov, checked-function(move, [FloFieldT, FloFieldT, FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `mov-x, checked-function(move-x, [FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `mov-y, checked-function(move-y, [FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `mov-z, checked-function(move-x, [FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `mag, checked-function(scale, [FloFieldT, FloFieldT, FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `mag1, checked-function(scale1, [FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `mag-x, checked-function(scale-x, [FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `mag-y, checked-function(scale-y, [FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `mag-z, checked-function(scale-z, [FloFieldT, FloFieldThunkT]))
  ;; add-binding(top-env, `rot, checked-function(rotate, [FloFieldT, FloFieldT, FloFieldT, FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `rot-x, checked-function(rotate-x, [FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `rot-y, checked-function(rotate-y, [FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `rot-z, checked-function(rotate-z, [FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `rev, checked-function(revolve-y, [FloFieldThunkT]))
  add-binding(top-env, `reflect-x, checked-function(reflect-x, [FloFieldThunkT]))
  add-binding(top-env, `reflect-y, checked-function(reflect-y, [FloFieldThunkT]))
  add-binding(top-env, `reflect-z, checked-function(reflect-z, [FloFieldThunkT]))
  add-binding(top-env, `reflect-xy, checked-function(reflect-xy, [FloFieldThunkT]))
  add-binding(top-env, `reflect-xz, checked-function(reflect-xz, [FloFieldThunkT]))
  add-binding(top-env, `reflect-yz, checked-function(reflect-yz, [FloFieldThunkT]))
  add-binding(top-env, `shear, checked-function(shear-x-y, [FloFieldT, FloFieldT, FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `taper, checked-function(taper-xy-z, [FloFieldT, FloFieldT, FloFieldT, FloFieldThunkT]))
  add-binding(top-env, `offset, checked-function(offset, [FloFieldT, FloFieldT]))
  add-binding(top-env, `clearance, checked-function(clearance, [FloFieldT, FloFieldT, FloFieldT]))
  add-binding(top-env, `shell, checked-function(shell, [FloFieldT, FloFieldT]))
  add-binding(top-env, `blend, checked-function(blend, [FloFieldT, FloFieldT, FloFieldT]))
  add-binding(top-env, `morph, checked-function(morph, [FloFieldT, FloFieldT, FloFieldT]))
  add-binding(top-env, `extrude, checked-function(extrude-z, [FloFieldT, FloFieldT]))
  add-binding(top-env, `cyl, checked-function(cylinder-z, [FloFieldT, FloFieldT]))
  add-binding(top-env, `capsule-z, checked-function(capsule-z, [FloFieldT, FloFieldT]))
  add-binding(top-env, `capsule, checked-function(capsule, [VecFieldT, VecFieldT, FloFieldT]))
  add-binding(top-env, `thicken, thicken)
  add-binding(top-env, `cone, checked-function(cone-z, [FloFieldT, FloFieldT]))
  add-binding(top-env, `pyr, checked-function(pyramid-z, [FloFieldT, FloFieldT]))
  add-binding(top-env, `torus, checked-function(torus-z, [FloFieldT, FloFieldT]))
