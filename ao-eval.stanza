defpackage ao-eval :
   import core
   import math
   import collections
   import reader
   import geom
   import eval
   import ao

public defn eval-ao (s:String) -> Tree :
  val forms = read-all(s)
  val es = unwrap-all(parse(forms))
  jit({ eval-begin(top-env, es) })

;;; TODO: TEMPORARY CHECKING UNTIL REPL MODE IMPLEMENTED IN COMPILER

defstruct ThunkExpectedException <: Exception : 
  arg: Int

defmethod print (o:OutputStream, e:ThunkExpectedException) :
  print(o, "Expected Thunk on Arg %_" % [arg(e)])

defn check-thunk (x, i) :
  if x is-not (() -> Node) :
    throw(ThunkExpectedException(i))

defn thunk-function0 (f) -> ((?) -> Node) :
  fn (t) : (check-thunk(t, 0) f(t))

defn thunk-function1 (f) -> ((Node, ?) -> Node) :
  fn (a0:Node t) : (println-all(["CHECK " a0 " and " t]) check-thunk(t, 1) f(a0 t))

defn thunk-function3 (f) -> ((Node, Node, Node, ?) -> Node) :
  fn (a0:Node a1:Node a2:Node t) :
    (println-all(["CHECK " t]) check-thunk(t, 3) f(a0 a1 a2 t))

add-binding(top-env, `pi, 3.1415)
add-binding(top-env, `lit, lit)
add-binding(top-env, `x, fab-x)
add-binding(top-env, `y, fab-y)
add-binding(top-env, `z, fab-z)
add-binding(top-env, `diff, difference)
add-binding(top-env, `bit-and, bit-and)
add-binding(top-env, `bit-or, bit-or)
add-binding(top-env, `plus, plus)
add-binding(top-env, `minus, minus)
add-binding(top-env, `times, times)
add-binding(top-env, `divide, divide)
add-binding(top-env, `negate, negate)
add-binding(top-env, `sin, sin)
add-binding(top-env, `cos, cos)
add-binding(top-env, `tan, tan)
add-binding(top-env, `asin, asin)
add-binding(top-env, `acos, acos)
add-binding(top-env, `atan, atan)
add-binding(top-env, `atan2, atan2)
add-binding(top-env, `pow, pow)
add-binding(top-env, `exp, exp)
add-binding(top-env, `sqr, sqr)
add-binding(top-env, `edge, edge)
add-binding(top-env, `rect, rect)
add-binding(top-env, `tri, triangle)
add-binding(top-env, `square, square)
add-binding(top-env, `circle, circle)
add-binding(top-env, `convex, convex)
add-binding(top-env, `circle-n, circle-n)
add-binding(top-env, `cube, cube)
add-binding(top-env, `sphere, sphere)
add-binding(top-env, `mov, thunk-function3(move))
add-binding(top-env, `mov-x, thunk-function1(move-x))
add-binding(top-env, `mov-y, thunk-function1(move-y))
add-binding(top-env, `mov-z, thunk-function1(move-x))
add-binding(top-env, `mag, thunk-function3(scale))
add-binding(top-env, `mag1, thunk-function1(scale1))
add-binding(top-env, `mag-x, thunk-function1(scale-x))
add-binding(top-env, `mag-y, thunk-function1(scale-y))
add-binding(top-env, `mag-z, thunk-function1(scale-z))
;; add-binding(top-env, `rot, thunk-function4(rotate))
add-binding(top-env, `rot-x, thunk-function1(rotate-x))
add-binding(top-env, `rot-y, thunk-function1(rotate-y))
add-binding(top-env, `rot-z, thunk-function1(rotate-z))
add-binding(top-env, `rev, thunk-function1(revolve-y))
add-binding(top-env, `reflect-x, thunk-function1(reflect-x))
add-binding(top-env, `reflect-y, thunk-function1(reflect-y))
add-binding(top-env, `reflect-z, thunk-function1(reflect-z))
add-binding(top-env, `reflect-xy, thunk-function1(reflect-xy))
add-binding(top-env, `reflect-xz, thunk-function1(reflect-xz))
add-binding(top-env, `reflect-yz, thunk-function1(reflect-yz))
add-binding(top-env, `shear, thunk-function3(shear-x-y))
add-binding(top-env, `taper, thunk-function3(taper-xy-z))
add-binding(top-env, `offset, offset)
add-binding(top-env, `clearance, clearance)
add-binding(top-env, `blend, blend)
add-binding(top-env, `morph, morph)
add-binding(top-env, `extrude, extrude-z)
add-binding(top-env, `cyl, cylinder-z)
add-binding(top-env, `cone, cone-z)
add-binding(top-env, `pyr, pyramid-z)
add-binding(top-env, `torus, torus-z)
