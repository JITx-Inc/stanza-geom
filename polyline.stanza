defpackage geom:
  import core
  import math
  import collections

public defstruct PolyLine :
  strokes: Array<Array<V3f>>

defmethod print (o:OutputStream, c:PolyLine) :
  print-all(["PolyLine(" strokes(c) ")"])

public defn bbox (p:PolyLine) -> Box :
  if length(strokes(p)) == 0 :
    Box(V3f(0.0f, 0.0f), V3f(0.0f, 0.0f))
  else :
    val inf = 1.0e6f
    val empty-box = Box(V3f(inf, inf, inf), V3f((- inf), (- inf), (- inf)))
    val boxes = seq(reduce{union, empty-box, seq(Box, _)}, strokes(p))
    reduce(union, empty-box, boxes)

public defn center (p:PolyLine) -> PolyLine :
  val ctr = center(bbox(p))
  val res = map<Array<V3f>>(fn (a): map<V3f>({ _ - ctr}, a), strokes(p))
  ;; println-all(["CTR " ctr " IN " p " OUT " res])
  PolyLine(res)
  
public defn center-x (p:PolyLine) -> PolyLine :
  val ctr = center(bbox(p))
  val res = map<Array<V3f>>(fn (a): map<V3f>(fn (v): V3f(x(v) - x(ctr), y(v)), a), strokes(p))
  ;; println-all(["CTR " ctr " IN " p " OUT " res])
  PolyLine(res)

public defn offset (p:PolyLine, off:V3f) -> PolyLine :
  PolyLine(map<Array<V3f>>(fn (a): map<V3f>({off + _}, a), strokes(p)))
